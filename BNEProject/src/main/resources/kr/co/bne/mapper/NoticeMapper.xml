<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.bne.mapper.Notice">
	
	<parameterMap id="procMap" type="HashMap">
		<parameter property="notice_type" mode="IN" jdbcType="VARCHAR" javaType="String" />
		<parameter property="link" mode="IN" jdbcType="INTEGER" javaType="int" />
		<parameter property="result" mode="OUT" jdbcType="INTEGER" javaType="int" />
		<parameter property="subject_id" mode="IN" jdbcType="VARCHAR" javaType="String" />
		<parameter property="object_id" mode="IN" jdbcType="VARCHAR" javaType="String" />
	</parameterMap>
	
	
	<resultMap type="Notice" id="Notice">
		<result column="notice_type" property="notice_type"/>
		<result column="notice_id" property="notice_id"/>
		<result column="subject" property="subject"/>
		<result column="object" property="object"/>
		<result column="reg_date" property="reg_date"/>
		<result column="read_flag" property="read_flag"/>
	</resultMap>


	<insert id="create_notice" parameterMap="procMap" statementType="CALLABLE">
		{ call CREATE_NOTICE (?,?,?,?,?) }
	</insert>
	
	
	
	<select id="selectNoticeList" parameterType="hashmap" resultMap="Notice">
		select notice_type, notice_id, subject, object, reg_date, read_flag
		from (select ROW_NUMBER() OVER (ORDER BY importance_level asc, reg_date desc) idx, notice_type, notice_id, subject, object, importance_level, to_char(reg_date, 'yyyy-mm-dd hh:mm:ss') reg_date, read_flag
		      from (select n.notice_type, n.notice_id, n.subject, t.IMPORTANCE_LEVEL, n.object, n.reg_date, n.read_flag 
		            from notice n, notice_type t 
		            where n.notice_type = t.notice_type_id)
		      where object = #{user_id} and read_flag = 0) a
		where idx between 1 + #{perContentNum}*(#{startIdx}-1) and #{startIdx}*#{perContentNum}
	</select>
	
	
	<update id="updateOneReadFlag" parameterType="int">
		UPDATE notice SET read_flag = 1 WHERE notice_id = #{value}
	</update>
	
	
	<update id="updateAllReadFlag">
		UPDATE notice SET read_flag = 1
	</update>
	
	
	<select id="selectUnconfirmedNotices" parameterType="hashmap" resultType="Notice">
<![CDATA[
select unconfirmed.*
from
(select ROW_NUMBER() OVER (ORDER BY reg_date desc, nt.importance_level) idx,nt.IMPORTANCE_LEVEL,n.NOTICE_TYPE,n.NOTICE_ID,n.REG_DATE,
TRUNC(MONTHS_BETWEEN(SYSDATE,n.reg_date)/12) || 'year ' || 
TRUNC(MONTHS_BETWEEN(SYSDATE, n.reg_date) - 
TRUNC(MONTHS_BETWEEN(SYSDATE, n.reg_date)/12) * 12) || 'month ' ||
TRUNC((MONTHS_BETWEEN(SYSDATE,n.reg_date) - 
TRUNC(MONTHS_BETWEEN(SYSDATE, n.reg_date))) * 30.5) || 'day ' || trunc(mod((sysdate-n.REG_DATE),1)*24) ||'h '||
trunc(mod((sysdate-n.REG_DATE)*24,1)*60) || 'min ' ||trunc(round(mod((sysdate-n.REG_DATE)*24*60,1)*60)) || 'sec ' passtime,
e.EMPLOYEE_NAME,case when notice_type='DAILY_POST' then e1.employee_name || '님이 일일업무 보고서를 작성하였습니다' 
when notice_type='WEEKLY_POST' then e1.employee_name || '님이 주간업무 보고서를 작성하였습니다.' 
when notice_type='DAILY_CORRECT' then e1.employee_name || '님이 일일업무 보고서를 수정하였습니다.'
when notice_type='WEEKLY_CORRECT' then e1.employee_name || '님이 주간업무 보고서를 수정하였습니다.'
END as content
from notice n,notice_type nt, employee e, employee e1
where e.employee_id=n.object and e1.employee_id=n.subject and
n.object=#{employee_id} and n.notice_type=nt.notice_type_id and n.READ_FLAG=0) unconfirmed
where unconfirmed.idx BETWEEN #{start} and #{end}
]]>
</select>

<select id="selectconfirmedNotices" parameterType="hashmap" resultType="Notice">
<![CDATA[
select confirmed.*
from
(select ROW_NUMBER() OVER (ORDER BY reg_date desc, nt.importance_level) idx,nt.IMPORTANCE_LEVEL,n.NOTICE_TYPE,n.NOTICE_ID,n.REG_DATE,
TRUNC(MONTHS_BETWEEN(SYSDATE,n.reg_date)/12) || 'year ' || 
TRUNC(MONTHS_BETWEEN(SYSDATE, n.reg_date) - 
TRUNC(MONTHS_BETWEEN(SYSDATE, n.reg_date)/12) * 12) || 'month ' ||
TRUNC((MONTHS_BETWEEN(SYSDATE,n.reg_date) - 
TRUNC(MONTHS_BETWEEN(SYSDATE, n.reg_date))) * 30.5) || 'day ' || trunc(mod((sysdate-n.REG_DATE),1)*24) ||'h '||
trunc(mod((sysdate-n.REG_DATE)*24,1)*60) || 'min ' ||trunc(round(mod((sysdate-n.REG_DATE)*24*60,1)*60)) || 'sec ' passtime,
e.EMPLOYEE_NAME,case when notice_type='DAILY_POST' then e1.employee_name || '님이 일일업무 보고서를 작성하였습니다' 
when notice_type='WEEKLY_POST' then e1.employee_name || '님이 주간업무 보고서를 작성하였습니다.' 
when notice_type='DAILY_CORRECT' then e1.employee_name || '님이 일일업무 보고서를 수정하였습니다.'
when notice_type='WEEKLY_CORRECT' then e1.employee_name || '님이 주간업무 보고서를 수정하였습니다.'
END as content
from notice n,notice_type nt, employee e, employee e1
where e.employee_id=n.object and e1.employee_id=n.subject and
n.object=#{employee_id} and n.notice_type=nt.notice_type_id and n.READ_FLAG=1) confirmed
where confirmed.idx BETWEEN #{start} and #{end}
]]>
</select>

</mapper>