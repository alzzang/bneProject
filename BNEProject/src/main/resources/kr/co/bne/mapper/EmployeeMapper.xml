<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.bne.mapper.Employee">

   <select id="selectEmployee" parameterType="String" resultType="Employee">
   <![CDATA[select e.*, d.department_name,
                 CASE when d.department_id = 0 then 'admin'
                    WHEN employee_id in (select manager_id from department) THEN 'manager'
                    ELSE 'employee' END position 
         from employee e, department d 
         where e.DEPARTMENT_ID = d.DEPARTMENT_ID
                 and employee_id = #{value}]]>
   </select>

   
   <select id="selectTeamMember" resultType="Employee" parameterType="Integer">
   <![CDATA[select employee_name,employee_id from employee where department_id=#{values}]]>
   </select>
   
   
   <select id="selectTeamMember_menu" resultType="Employee" parameterType="String">
      select employee_id, employee_name
      from employee
      where department_id = (select department_id 
                             from employee 
                             where employee_id = #{value})
            and employee_id not in ((select manager_id 
                                    from department 
                                    where department_id = (select department_id 
                                                           from employee 
                                                           where employee_id=#{value})), #{value})
   </select>
   
   <select id="selectDeptMember" parameterType="Integer" resultType="Employee">
	    select e.*, d.department_name,
        			CASE WHEN employee_id in (select manager_id from department) THEN 'manager'
              		ELSE 'employee' END position 
			from employee e, department d 
			where e.DEPARTMENT_ID = d.DEPARTMENT_ID
        			and e.department_id =#{departmentId} order by position desc , employee_name
	</select>
	
   
   
	<update id="updatePassword" parameterType="HashMap">
	<![CDATA[update employee set password=#{password} where employee_id=#{id}]]>
	</update>
	
	<update id="updateEmployee" parameterType="Employee">
	<![CDATA[update employee set employee_name=#{employee_name}, department_id=#{department_id}, email=#{email}, mobile_phone=#{mobile_phone} 
	where employee_id=#{employee_id}]]>
	</update>
	
	<update id="updateFile" parameterType="HashMap">
	<![CDATA[update employee set file_position=#{filePosition} where employee_id=#{id}]]>
	</update>

	<update id="defaultUpdateFile" parameterType="String">
	<![CDATA[update employee set file_position='1.png' where employee_id=#{value}]]>
	</update>

	<select id="selectImage" resultType="Employee">
	<![CDATA[select employee_name,file_position from employee where employee_id='1'	]]>
	</select>
	
	<select id="empSearch" parameterType="String" resultType="Employee">
		<![CDATA[
		   select EMPLOYEE_ID,EMPLOYEE_NAME,DEPARTMENT_ID,mobile_phone,email,file_position
 from employee
 where EMPLOYEE_NAME like #{value}
 minus
 select EMPLOYEE_ID,EMPLOYEE_NAME,DEPARTMENT_ID,mobile_phone,email,file_position
 from employee
 where EMPLOYEE_NAME ='admin'
 order by 2	]]>
	</select>

	
	
	<!-- 전체 리스트 페이지 갯수 -->
	<select id="getPagingNum_EmployeeList" parameterType="hashmap" resultType="int">
		select ceil(count(*)/#{perContentNum}) cnt
		from (select * from department where department_id != 0) d , employee e
		where d.department_id = e.department_id
		<if test="employee_id != null">
			and e.employee_id like '%' || #{employee_id} || '%'
		</if>
		<if test="employee_name != null">
			and e.employee_name like '%' || #{employee_name} || '%'
		</if>
		<if test="department_id != null">
			and e.department_id = #{department_id}
		</if>	
		<if test="position != null and position.equals('employee')">
			and e.employee_id in d.manager_id
		</if>
		<if test="position != null and position.equals('manager')">
			and e.employee_id not in d.manager_id
		</if>
	</select>
	
	
	<select id="getEmployeeList" parameterType="hashmap" resultType="Employee">
		select idx, employee_id, employee_name, department_id, mobile_phone, email, department_name, CASE
              		WHEN employee_id in (select manager_id from department) THEN 'manager'
              		ELSE 'employee' END position 
		from (	select ROW_NUMBER() over (order by employee_name asc) idx, e.*, d.department_name
				from (select * from department where department_id != 0) d , employee e
				where d.department_id = e.department_id
				<if test="employee_id != null">
					and e.employee_id like '%' || #{employee_id} || '%'
				</if>
				<if test="employee_name != null">
					and e.employee_name like '%' || #{employee_name} || '%'
				</if>
				<if test="department_id != null">
					and e.department_id = #{department_id}
				</if>	
				<if test="position != null and position.equals('employee')">
					and e.employee_id not in d.manager_id
				</if>
				<if test="position != null and position.equals('manager')">
					and e.employee_id in d.manager_id
				</if>
			)
		where idx between 1 + #{perContentNum} * (#{startIdx}-1) and #{startIdx} * #{perContentNum}
		order by idx asc
	</select>
	
	
	
	<delete id="deleteEmployee" parameterType="String">
		delete from employee
		where employee_id = #{value}
	</delete>
	
	
	<insert id="insertEmployee" parameterType="Employee">
		insert into employee(employee_id, employee_name, password, department_id, file_position, mobile_phone, email)
		values(EMPLOYEE_ID_NAMING(#{department_id}), #{employee_name}, #{password}, #{department_id}, #{file_position}, #{mobile_phone}, #{email})
	</insert>
   
</mapper>